{"mappings":"AAAA,KAAK,CAAC,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAS;AAExD,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAE,CAAC,EAAE,CAAC;IAC5B,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAE,CAAC,EAAE,MAAM,EAAE,CAAC;QACvC,UAAU,CAAC,QAAQ,GAAI,CAAC;YACtB,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,qCAAqC,EAAE,CAAC,CAAC,OAAO;QACpE,CAAC,EAAE,CAAC,GAAG,IAAI;IACb,CAAC;AACH,CAAC;AAED,EAAuC,AAAvC,qCAAuC;AAEvC,EAAuC,AAAvC,qCAAuC;AAEvC,EAA2C,AAA3C,yCAA2C;AAC3C,KAAK,CAAC,UAAU,oBAAqB,CAAC;IACpC,GAAG,CAAC,CAAC;QACH,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAC1B,CAA2E;QAE7E,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI;QAEhC,EAA0E,AAA1E,wEAA0E;QAC1E,EAAE,GAAG,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEvE,EAA8C,AAA9C,4CAA8C;QAC9C,GAAG,CAAC,CAAC,CAAA,MAAM,EAAA,CAAC,GAAG,IAAI,CAAC,IAAI;QACxB,MAAM,GAAG,CAAC;YACR,EAAE,EAAE,MAAM,CAAC,EAAE;YACb,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,SAAS,EAAE,MAAM,CAAC,UAAU;YAC5B,KAAK,EAAE,MAAM,CAAC,SAAS;YACvB,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,WAAW,EAAE,MAAM,CAAC,YAAY;YAChC,WAAW,EAAE,MAAM,CAAC,WAAW;QACjC,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,MAAM;QAClB,EAAmB,AAAnB,iBAAmB;QACnB,KAAK,CAAC,MAAM,IAAI;;cAEN,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC;;YAEvC,EAAE,MAAM,CAAC,KAAK,CAAC;;;;;;;;;iEASsC,EAAE,MAAM,CAAC,WAAW,CAAC;;;;;;;gEAOtB,EAAE,MAAM,CAAC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgC5E,EAAE,MAAM,CAAC,WAAW,CAAC,GAAG,EAAC,GAAG,GAAI,CAAC;YAC/B,MAAM,EAAE;;;;;wCAKwB,EAAE,GAAG,CAAC,QAAQ,CAAC;;uCAEhB,EAAE,GAAG,CAAC,IAAI,CAAC;YACtC,EAAE,GAAG,CAAC,WAAW,CAAC;;;QAGtB;QACF,CAAC,EAAE,IAAI,CAAC,CAAE,GAAE;;;;;;;;sCAQoB,EAAE,MAAM,CAAC,SAAS,CAAC;;;;;YAK7C,EAAE,MAAM,CAAC,SAAS,CAAC;;;;;;;;;EAS7B;QACA,EAAuE,AAAvE,qEAAuE;QACvE,eAAe,CAAC,SAAS,GAAG,CAAE;QAC9B,EAA0C,AAA1C,wCAA0C;QAC1C,eAAe,CAAC,kBAAkB,CAAC,CAAY,aAAE,MAAM;IACvD,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC;QACf,KAAK,CAAC,KAAK;IACb,CAAC;AACH,CAAC;AACD,UAAU","sources":["src/js/controller.js"],"sourcesContent":["const recipeContainer = document.querySelector('.recipe');\n\nconst timeout = function (s) {\n  return new Promise(function (_, reject) {\n    setTimeout(function () {\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\n    }, s * 1000);\n  });\n};\n\n// https://forkify-api.herokuapp.com/v2\n\n///////////////////////////////////////\n\n// Loading recipe data from the forkify API\nconst showRecipe = async function () {\n  try {\n    const response = await fetch(\n      'https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886'\n    );\n    const data = await response.json();\n\n    // Displaying a deliberate error message instead of displaying bad request\n    if (!response.ok) throw new Error(`${data.message} (${response.status})`);\n\n    // Renaming the data being pulled from the API\n    let {recipe} = data.data;\n    recipe = {\n      id: recipe.id,\n      title: recipe.title,\n      publisher: recipe.publisher,\n      sourceUrl: recipe.source_url,\n      image: recipe.image_url,\n      servings: recipe.servings,\n      cookingTime: recipe.cooking_time,\n      ingredients: recipe.ingredients,\n    };\n    console.log(recipe);\n    // Rendering recipe\n    const markup = `\n  <figure class=\"recipe__fig\">\n    <img src=\"${recipe.image}\" alt=\"${recipe.title}\" class=\"recipe__img\" />\n    <h1 class=\"recipe__title\">\n      <span>${recipe.title}</span>\n    </h1>\n  </figure>\n\n  <div class=\"recipe__details\">\n    <div class=\"recipe__info\">\n      <svg class=\"recipe__info-icon\">\n        <use href=\"src/img/icons.svg#icon-clock\"></use>\n      </svg>\n      <span class=\"recipe__info-data recipe__info-data--minutes\">${recipe.cookingTime}</span>\n      <span class=\"recipe__info-text\">minutes</span>\n    </div>\n    <div class=\"recipe__info\">\n      <svg class=\"recipe__info-icon\">\n        <use href=\"src/img/icons.svg#icon-users\"></use>\n      </svg>\n      <span class=\"recipe__info-data recipe__info-data--people\">${recipe.servings}</span>\n      <span class=\"recipe__info-text\">servings</span>\n\n      <div class=\"recipe__info-buttons\">\n        <button class=\"btn--tiny btn--increase-servings\">\n          <svg>\n            <use href=\"src/img/icons.svg#icon-minus-circle\"></use>\n          </svg>\n        </button>\n        <button class=\"btn--tiny btn--increase-servings\">\n          <svg>\n            <use href=\"src/img/icons.svg#icon-plus-circle\"></use>\n          </svg>\n        </button>\n      </div>\n    </div>\n\n    <div class=\"recipe__user-generated\">\n      <svg>\n        <use href=\"src/img/icons.svg#icon-user\"></use>\n      </svg>\n    </div>\n    <button class=\"btn--round\">\n      <svg class=\"\">\n        <use href=\"src/img/icons.svg#icon-bookmark-fill\"></use>\n      </svg>\n    </button>\n  </div>\n\n  <div class=\"recipe__ingredients\">\n    <h2 class=\"heading--2\">Recipe ingredients</h2>\n    <ul class=\"recipe__ingredient-list\">\n      ${recipe.ingredients.map(ing => {\n        return `\n          <li class=\"recipe__ingredient\">\n          <svg class=\"recipe__icon\">\n            <use href=\"src/img/icons.svg#icon-check\"></use>\n          </svg>\n          <div class=\"recipe__quantity\">${ing.quantity}</div>\n          <div class=\"recipe__description\">\n            <span class=\"recipe__unit\">${ing.unit}</span>\n            ${ing.description}\n          </div>\n        </li>\n        `;\n      }).join('')}\n    </ul>\n  </div>\n\n  <div class=\"recipe__directions\">\n    <h2 class=\"heading--2\">How to cook it</h2>\n    <p class=\"recipe__directions-text\">\n      This recipe was carefully designed and tested by\n      <span class=\"recipe__publisher\">${recipe.publisher}</span>. Please check out\n      directions at their website.\n    </p>\n    <a\n      class=\"btn--small recipe__btn\"\n      href=\"${recipe.sourceUrl}\"\n      target=\"_blank\"\n    >\n      <span>Directions</span>\n      <svg class=\"search__icon\">\n        <use href=\"src/img/icons.svg#icon-arrow-right\"></use>\n      </svg>\n    </a>\n  </div>\n  `;\n  // Remove the initial message prompting the user to search for a recipe\n  recipeContainer.innerHTML = '';\n  // Displaying the data recieved by the API\n  recipeContainer.insertAdjacentHTML('afterbegin', markup);\n  } catch (error) {\n    alert(error);\n  }\n}\nshowRecipe();"],"names":[],"version":3,"file":"index.62406edb.js.map","sourceRoot":"/__parcel_source_root/"}